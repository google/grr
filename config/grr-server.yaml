# GRR Server configuration file
# This is the template used in deployment of GRR. It contains the basic
# elements and test configurations to run the system.

AdminUI.bind: "::"

AdminUI.django_debug: True

AdminUI.port: 8000

AdminUI.url: http://localhost:8000

AdminUI.webauth_manager: BasicWebAuthManager

Client.company_name: GRR Project

Client.description: "%(name) %(platform) %(arch)"

Client.control_urls:
  - http://localhost:8080/control

Client.name: GRR

Client.proxy_servers:

Client.version_major: 3

Client.version_minor: 0

Client.version_release: 3

Client.version_revision: 0

Client.foreman_check_frequency: 600

Client.poll_max: 600

# Writeback for server components.
Config.writeback: /etc/grr/server.local.yaml

Datastore.implementation: MongoDataStore

Datastore.security_manager: BasicAccessControlManager

Installer.old_writeback: /usr/lib/grr/grrd.conf

# Logging.domain: example.com

Logging.engines: "stderr,file"

Logging.path: /var/log/grr

Logging.verbose: False

Mongo.db_name: grr

# Mongo.server:
Mongo.port: 27017


# These must be in the domain specified above as Logging.domain.
# Monitoring.emergency_access_email: grr-emergency-access@example.com
# Monitoring.alert_email: grr-monitoring@example.com

# Mysql.host:
# Mysql.port:
# Mysql.database_name:
# Mysql.table_name:
# Mysql.database_username:
# Mysql.database_password:

AdminUI Context:
  Logging.filename: "%(Logging.path)/grr-ui.log"

  Monitoring.http_port: 44449

# The client's reported architecture string depends on the Arch context
Arch:amd64:
  Client.arch: amd64

Arch:i386:
  Client.arch: i386

Client Context:
  Config.writeback: /etc/grr/client.local.yaml

ClientBuilder Context:
  ClientBuilder.executables_path: |
    %(ClientBuilder.source)/grr/executables

  Target:Darwin:

   Client.install_path: |
     /usr/lib/%(Client.name)/%(ClientBuilder.output_basename)

   Client.rekall_profile_cache_path: |
     %(Client.install_path)/rekall_profiles

   ClientBuilder.build_dest: "%(Client.name)-build"

   ClientBuilder.build_root_dir: /Users/%(USER|env)/mac-build

   ClientBuilder.build_src_dir: "%(ClientBuilder.build_root_dir)/grr"

   ClientBuilder.install_dir: "/usr/lib/%(Client.name)/%(ClientBuilder.output_basename)"

   # Needed for package maker. Do not touch.
   ClientBuilder.mangled_output_basename: |
       %(Client.name)_%(Client.version_major).%(Client.version_minor).%(Client.version_revision)

   ClientBuilder.output_extension: .pkg

   ClientBuilder.package_dir: "%(ClientBuilder.build_root_dir)/%(Client.name)-pkg"

   ClientBuilder.package_maker_organization: com.google.code

   ClientBuilder.template_extension: .template

   ClientBuilder.package_maker_path: |
       /Applications/PackageMaker.app/Contents/MacOS/PackageMaker

   PyInstaller.build_dir: |
       %(ClientBuilder.build_root_dir)/%(ClientBuilder.build_dest)

   PyInstaller.path: |
       /Users/%(USER|env)/mac-build/pyinstaller/pyinstaller.py

  Target:Linux:
    Client.binary_name: grrd

    Client.install_path: |
      /usr/lib/%(Client.name)/%(ClientBuilder.output_basename)

    Client.rekall_profile_cache_path: |
      %(Client.install_path)/rekall_profiles

    Client.name: grr

    ClientBuilder.daemon_link: |
      /usr/sbin/%(Client.binary_name)

    ClientBuilder.output_extension: .deb

    ClientBuilder.target_dir: |
      /usr/lib/%(Client.name)/%(ClientBuilder.output_basename)

    Logging.engines: stderr

    PyInstaller.build_dir: |
      %(PyInstaller.build_root_dir)/build

    PyInstaller.build_root_dir: /usr/local/grr_build

    PyInstaller.distpath: |
      %(PyInstaller.dpkg_root)/debian/

    PyInstaller.dpkg_root: |
      %(PyInstaller.build_root_dir)/dist

    PyInstaller.path: |
      %(PyInstaller.build_root_dir)/pyinstaller/pyinstaller.py

    Target:LinuxRpm:
      ClientBuilder.template_extension: .rpm.zip

      ClientBuilder.output_extension: .rpm

      ClientBuilder.target_dir: |
        /usr/lib64/%(Client.name)/%(ClientBuilder.output_basename)

      Client.install_path: |
        /usr/lib64/%(Client.name)/%(ClientBuilder.output_basename)

      Client.rekall_profile_cache_path: |
        %(Client.install_path)/rekall_profiles

  Target:Windows:
    ClientBuilder.output_extension: .exe

    ClientBuilder.template_extension: .zip

    ClientBuilder.vs_dir: |
      %{C:\Program Files (x86)\Microsoft Visual Studio 10.0}

    PyInstaller.path: C:\\grr_build\\pyinstaller\\pyinstaller.py

  # This indicates that we are building a client for debugging.
  DebugClientBuild Context:

    Logging.verbose: True

    ClientBuilder.console: True

    Client.poll_max: 5

    Client.foreman_check_frequency: 30

    Client.rss_max: 4000

    Nanny.unresponsive_kill_period: 3600

    Client.prefix: dbg_

CommandLine Context:
  Logging.engines: stderr

  Logging.verbose: False

ConfigUpdater Context:
  ConfigUpdater.old_config: /etc/grr/grr-server.conf

Demo Context:
  Client.control_urls:
    - http://%(Frontend.bind_address):%(Frontend.bind_port)/control

  Client.poll_max: 5

  Client.rss_max: 4000

  Datastore.implementation: FakeDataStore

  Frontend.bind_address: 127.0.0.1

  Frontend.bind_port: 8080

  Logging.filename: "%(Logging.path)/grr-demo.log"

Enroller Context:
  Logging.filename: "%(Logging.path)/grr-enroller.log"

  Monitoring.http_port: 44442

HTTPServer Context:
  Logging.filename: "%(Logging.path)/grr-http-server.log"

Platform:Darwin:
  Client.name: grr

  Client.config_file_name: grr.yaml

  Client.package_maker_organization: com.google.code

  Client.platform: darwin

  Client.plist_filename: "%(Client.plist_label).plist"

  Client.plist_label: "%(Client.plist_label_prefix).google.code.%(Client.name)"

  Client.plist_label_prefix: com

  Client.plist_path: /Library/LaunchDaemons/%(Client.plist_filename)

  Logging.engines: stderr,file,syslog

  Logging.syslog_path: localhost:514

  # Darwin systems have their drivers stored in this part of the config space.
  MemoryDriver.aff4_paths:
    - "%(Config.aff4_root)/drivers/osx/memory/pmem-signed"
    - "%(Config.aff4_root)/drivers/osx/memory/pmem"

  MemoryDriver.device_path: /dev/pmem

  Arch:amd64:
    MemoryDriver.driver_files:
      - binaries/OSXPMem-signed.tar.gz
      - binaries/OSXPMem.tar.gz

Platform:Linux:
  Client.binary_name: grrd

  Client.platform: linux

  Logging.engines: "stderr,file,syslog"

  Logging.syslog_path: "/dev/log"

  MemoryDriver.device_path: /dev/pmem

Platform:Windows:
  Client.binary_name: "%(Client.name).exe"

  Client.config: reg://%(Client.config_hive)/%(Client.config_key)

  Client.config_hive: HKEY_LOCAL_MACHINE

  Client.config_key: Software\\%(Client.name)

  Client.install_path: |
    %(SystemRoot|env)\\System32\\%(Client.name)\\%(Client.version_string)

  Client.tempdir: "%(TEMP|env)"

  Client.platform: windows

  Logging.engines: "stderr,file,event_log"

  Logging.path: |
    %(WINDIR|env)\\System32\\logfiles\\

  MemoryDriver.device_path: \\\\.\\pmem

  MemoryDriver.display_name: grr pmem

  MemoryDriver.service_name: pmem

  Nanny.child_binary: |
    %(Client.install_path)\\%(Client.binary_name)

  Nanny.child_command_line: |
    %(child_binary) --config "%(Client.install_path)\\%(Client.binary_name).yaml"

  Nanny.binary: |
    %(Client.install_path)\\%(Nanny.service_binary_name)

  Nanny.service_binary_name: "%(Client.name)service.exe"

  Nanny.service_description: "%(Client.name) Monitor Service"

  Nanny.service_key: "%(Client.config_key)"

  Nanny.service_key_hive: "%(Client.config_hive)"

  Nanny.service_name: "%(Client.name) Monitor"

  Arch:amd64:
    ClientBuilder.vs_arch: x64

    ClientBuilder.vs_env_script: "%(ClientBuilder.vs_dir)/VC/bin/amd64/vcvars64.bat"

    MemoryDriver.aff4_paths:
      - "%(Config.aff4_root)/drivers/windows/memory/winpmem.amd64.sys"

    MemoryDriver.driver_files:
      - binaries/winpmem_amd64_1.6.1.sys

  Arch:i386:
    ClientBuilder.vs_arch: Win32

    ClientBuilder.vs_env_script: "%(ClientBuilder.vs_dir)/VC/bin/vcvars32.bat"

    MemoryDriver.aff4_paths:
      - "%(Config.aff4_root)/drivers/windows/memory/winpmem.x86.sys"

    MemoryDriver.driver_files:
      - binaries/winpmem_i386_1.6.1.sys

  Client Context:
    # This is where the client will write back volatile configuration data.
    Config.writeback: reg://%(Client.config_hive)/%(Client.config_key)

SingleServer Context:
  Logging.filename: "%(Logging.path)/grr-single-server.log"

  Monitoring.http_port: 44441

Worker Context:
  Cron.active: True

  Logging.filename: "%(Logging.path)/grr-worker.log"

  Monitoring.http_port: 44441

  Worker.worker_process_count: 1

# For Test Context, see test_data/grr_test.yaml

DataServer Context:
# By default use an sqlite backend.
  Datastore.implementation: SqliteDataStore


# These jobs will be enabled by default both for Worker Context and
# Test Context. They will only actually run if Cron.active is True.
Cron.enabled_system_jobs:
- FilestoreStatsCronFlow
- GRRVersionBreakDown
- InterrogateClientsCronFlow
- LastAccessStats
- OSBreakDown
- ProcessHuntResultsCronFlow
- PurgeClientStats
- PackedVersionedCollectionCompactor
