# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure(2) do |config|

  config.vm.synced_folder "../", "/grr"

  config.vm.provider "virtualbox" do |vb|
    vb.memory = "2048"
    vb.cpus = "2"
  end

  config.vm.define "centos_5.11_32" do |box|
    box.vm.box = "mrgcastle/centos_5.11_32"
    box.vm.provision "shell" do |s|
      s.path = "install_linux.sh"
      s.args = ["CentOS"]
    end
    config.vm.box_download_checksum_type = "sha256"
    config.vm.box_download_checksum = "f142605ff94da152af13b5f5c34868da0f841cf3ab65e89943cc7a650fc00829"
  end

  config.vm.define "centos_5.11_64" do |box|
    box.vm.box = "mrgcastle/centos_5.11_64"
    box.vm.provision "shell" do |s|
      s.path = "install_linux.sh"
      s.args = ["CentOS"]
    end
    config.vm.box_download_checksum_type = "sha256"
    config.vm.box_download_checksum = "d367c306dee30678e512f1d5e8c0717497a60fea846d024b53641318c304af19"
  end

  config.vm.define "ubuntu_trusty64" do |box|
    box.vm.box = "ubuntu/trusty64"
    box.vm.provision "shell" do |s|
      s.path = "../scripts/install_script_ubuntu.sh"
      s.args = ["-dy"]
    end
  end

  config.vm.define "ubuntu_lucid32" do |box|
    box.vm.box = "mrgcastle/ubuntu-lucid32"
    box.vm.provision "shell" do |s|
      s.path = "install_linux.sh"
      s.args = ["Ubuntu"]
    end
    config.vm.box_download_checksum_type = "sha256"
    config.vm.box_download_checksum = "15a36cfe264f3eb58bb9c540d9de5a5a945b8c5162d6fd66b59925ed0a832e86"
  end

  config.vm.define "ubuntu_lucid64" do |box|
    box.vm.box = "mrgcastle/ubuntu-lucid64"
    box.vm.provision "shell" do |s|
      s.path = "install_linux.sh"
      s.args = ["Ubuntu"]
    end
    config.vm.box_download_checksum_type = "sha256"
    config.vm.box_download_checksum = "f7d6b78fa492fe964f5ba89702f890b309d97fd0a23aa717f6e138752d2e7a69"
  end

  # OS X licensing doesn't allow distribution of VMs, you'll need to build your
  # own base VM, see:
  # https://github.com/google/grr-doc/blob/master/osxclient.adoc
  config.vm.define "OS_X_10.8.5" do |box|
    box.vm.box = "OS_X_10.8.5"
    # Random keypair generation and insertion doesn't work on OS X
    box.ssh.insert_key = false
    box.vm.provider "vmware_fusion" do |v|
      v.vmx["memsize"] = "4096"
      v.vmx["numvcpus"] = "2"
    end
    box.vm.provision "shell" do |s|
      s.path = "install_darwin.sh"
    end
  end

  # This is the fully configured windows VM with all dependencies installed
  config.vm.define "windows_7_64" do |box|
    box.vm.box = "windows_7_64"
    box.vm.guest = :windows
    # Random keypair generation and insertion doesn't work on Windows
    box.ssh.insert_key = false
    # msbuild doesn't work properly unless you have a real user session, which
    # key-based auth doesn't give you.  But we can't just use passwd auth,
    # because vagrant doesn't let you do 'vagrant ssh -c' when using password
    # auth. Fall back on using winrm, which is only available for use at
    # provisioning time, so we need to use vagrant --provision reload and wait
    # for a reboot. Ugh.
    box.vm.communicator = "winrm"
    box.vm.provider "virtualbox" do |v|
      v.memory = "8192"
      v.cpus = "6"
    end
    config.vm.provision "shell", path: "windows/build_windows_templates.bat"
  end

  # This is the bare windows VM you get from packer.
  config.vm.define "windows_7_64_vanilla" do |box|
    box.vm.box = "windows_7_64_vanilla"
    box.vm.guest = :windows
    # Random keypair generation and insertion doesn't work on Windows
    box.ssh.insert_key = false
    box.vm.communicator = "winrm"
    box.vm.provider "virtualbox" do |v|
      v.gui = true
      v.memory = "8192"
      v.cpus = "6"
    end
  end

  # This is the bare windows VM you get from packer. Just here for testing 32bit
  # build, we don't build with this.
  config.vm.define "windows_7_32_vanilla" do |box|
    box.vm.box = "windows_7_32_vanilla"
    box.vm.guest = :windows
    # Random keypair generation and insertion doesn't work on Windows
    box.ssh.insert_key = false
    box.vm.communicator = "winrm"
    box.vm.provider "virtualbox" do |v|
      v.gui = true
      v.memory = "8192"
      v.cpus = "6"
    end
  end

  # This is the base windows VM with major dependencies like visualstudio
  # installed.  Unfortunately we can't use the provision script functionality to
  # install the rest of the dependencies because the vagrant output redirection
  # triggers this bug:
  # http://www.leeholmes.com/blog/2008/07/30/workaround-the-os-handles-position-is-not-what-filestream-expected/
  config.vm.define "windows_7_64_base" do |box|
    box.vm.box = "windows_7_64_base"
    box.vm.guest = :windows
    # Random keypair generation and insertion doesn't work on Windows
    box.ssh.insert_key = false
    box.vm.communicator = "winrm"
    box.vm.provider "virtualbox" do |v|
      v.gui = true
      v.memory = "8192"
      v.cpus = "6"
    end
  end

end
