@use "@angular/material" as mat;

// Angular Material theme definition.
$primary: mat.define-palette(mat.$blue-palette, 600, 400);
$accent: mat.define-palette(mat.$green-palette, A700, A400, A200);
$warn: mat.define-palette(mat.$amber-palette, 900, 600, 400);
$success: mat.define-palette(mat.$green-palette);
$danger: mat.define-palette(mat.$red-palette);

// See https://github.com/angular/components/blob/b6358b2e32d6cbd3646411fc576e46dc55bcf512/src/material/core/theming/_palette.scss#L712
// and https://stackoverflow.com/questions/43438305/how-to-change-font-color-of-primary-palette-in-angular-material2/46157803#46157803
$_grr-foreground: (
  logo: mat.get-color-from-palette(mat.$grey-palette, 600),
  text: mat.get-color-from-palette(mat.$grey-palette, 900),
  text-light: mat.get-color-from-palette(mat.$grey-palette, 600),
  divider-light: mat.get-color-from-palette(mat.$grey-palette, 300),
  divider: mat.get-color-from-palette(mat.$grey-palette, 600),
  dividers: mat.get-color-from-palette(mat.$grey-palette, 600),
  success: mat.get-color-from-palette(mat.$green-palette, 700),
  success-light: #8afab1,
  danger: mat.get-color-from-palette(mat.$red-palette, 700),
  danger-light: mat.get-color-from-palette(mat.$red-palette, 500),
  in-progress: mat.get-color-from-palette(mat.$yellow-palette, 700),
  icon-grey: mat.get-color-from-palette(mat.$grey-palette, 700),
  selected: mat.get-color-from-palette(mat.$blue-palette, 100),
  link: mat.get-color-from-palette(mat.$blue-palette, 600),
);
// See https://github.com/angular/components/blob/b6358b2e32d6cbd3646411fc576e46dc55bcf512/src/material/core/theming/_palette.scss#L674
$_grr-background: (
  hover: #e8f0fe,
  app-bar: white,
  darker-background: #f7f8f9,
  page-background: mat.get-color-from-palette(mat.$grey-palette, 50),
  panel-background: mat.get-color-from-palette(mat.$grey-palette, 100),
  // custom GRR property
  shadow: rgba(0, 0, 0, 0.5),
  // custom GRR property
  danger-light: mat.get-color-from-palette($danger, 100),
  dark-background: mat.get-color-from-palette(mat.$grey-palette, 400),
);
// TODO: Provide this application's typography in the
// theme configuration instead of providing null.
$_theme: mat.define-light-theme(
  (
    color: (
      primary: $primary,
      accent: $accent,
      warn: $warn,
    ),
    typography: null,
    density: 0,
  )
);
$theme: map-merge(
  $_theme,
  (
    color:
      map-merge(
        mat.get-color-config($_theme),
        (
          foreground:
            map-merge(
              map-get(mat.get-color-config($_theme), foreground),
              $_grr-foreground
            ),
          background:
            map-merge(
              map-get(mat.get-color-config($_theme), background),
              $_grr-background
            ),
        )
      ),
  )
);

$foreground: map-get(mat.get-color-config($theme), foreground);
$background: map-get(mat.get-color-config($theme), background);

$google-sans-display-family: Google Sans Display, "Helvetica Neue", sans-serif;
$google-sans-family: Google Sans, "Helvetica Neue", sans-serif;
$roboto-family: Roboto, "Helvetica Neue", sans-serif;
$google-sans-display-family-str: 'Google Sans Display, "Helvetica Neue", sans-serif';
$google-sans-family-str: 'Google Sans, "Helvetica Neue", sans-serif';
$roboto-family-str: 'Roboto, "Helvetica Neue", sans-serif';
$custom-typography: mat.define-typography-config(
  $display-1:
    mat.define-typography-level(
      64px,
      76px,
      400,
      $google-sans-display-family-str,
      normal
    ),
  $display-2:
    mat.define-typography-level(
      56px,
      64px,
      400,
      $google-sans-display-family-str,
      normal
    ),
  $display-3:
    mat.define-typography-level(
      44px,
      52px,
      400,
      $google-sans-display-family-str,
      normal
    ),
  $headline:
    mat.define-typography-level(
      18px,
      24px,
      400,
      $google-sans-family-str,
      normal
    ),
  $title:
    mat.define-typography-level(16px, 24px, 500, $roboto-family-str, 0.2px),
  $subheading-1:
    mat.define-typography-level(
      14px,
      20px,
      500,
      $google-sans-family-str,
      0.25px
    ),
  $subheading-2:
    mat.define-typography-level(16px, 24px, 500, $google-sans-family-str, 0.1px),
  $body-1:
    mat.define-typography-level(14px, 20px, 400, $roboto-family-str, 0.2px),
  $body-2:
    mat.define-typography-level(16px, 24px, 400, $roboto-family-str, 0.1px),
  $caption:
    mat.define-typography-level(12px, 16px, 400, $roboto-family-str, 0.3px),
);
@include mat.all-component-typographies($custom-typography);

$button-horizontal-padding: 16px;

// Padding in major containers, e.g. sidebar drawer.
$container-padding: 16px;

$card-margin: 20px;

$centered-content-max-width: 1280px;
$centered-content-width: 80%;

// Vertical spacing between major elements (e.g. cards) on a page.
$page-spacing: 16px;

.mat-stroked-button {
  overflow: hidden;

  &,
  &.mat-primary,
  &.mat-button-disabled {
    border-color: mat.get-color-from-palette($foreground, divider-light);
  }

  &:not(.mat-button-disabled),
  &.mat-primary:not(.mat-button-disabled) {
    border-color: mat.get-color-from-palette($foreground, divider-light);
    color: mat.get-color-from-palette($primary, 600);
    background: white;
  }
}

body .mat-button-toggle-group,
body .mat-button-toggle-group:not([class*="mat-elevation-z"]),
body mat-button-toggle-group.mat-button-toggle-group {
  border-radius: 4px;
  box-shadow: none;

  .mat-button-toggle {
    border: 0.5px solid mat.get-color-from-palette(mat.$grey-palette, 300);
    background-color: mat.get-color-from-palette(mat.$grey-palette, 300);
    color: mat.get-color-from-palette(mat.$blue-palette, 700);
  }

  .mat-button-toggle-checked {
    background-color: mat.get-color-from-palette(mat.$grey-palette, 700);
    color: white;
  }
}
