check_id: 'PAM-SSH-PAMACCESS'
method:
  - target: {os: ['Linux']}
    probe:
      - artifact: 'PamConfig'
        hint:
          problem: 'PAM ssh service must require an account.'
          fix: 'Add "account required pam_access.so" to the PAM ssh config.'
        match: 'NONE'
        filters:
          - type: 'ForEach'
            expression: entries
          - type: 'ObjectFilter'
            expression: 'item.service is "ssh"'
          - type: 'ObjectFilter'
            expression: 'item.type is "account"'
          - type: 'ObjectFilter'
            expression: 'item.control is "required"'
          - type: 'ObjectFilter'
            expression: 'item.module_path contains "pam_access.so"'
---
check_id: 'PAM-SSH-UNCONDITIONAL-PERMIT'
method:
  - target: {os: ['Linux']}
    probe:
      - artifact: 'PamConfig'
        hint:
          problem: 'PAM ssh service has unconditional authentication.'
          fix: 'Remove "auth done pam_permit.so" from the PAM ssh config.'
          format: >
            In service '{item.service}': {item.type} {item.control}
            {item.module_path} {item.module_args}
        match: 'ANY'
        filters:
          - type: 'ForEach'
            expression: entries
          - type: 'ObjectFilter'
            expression: 'item.service is "ssh"'
          - type: 'ObjectFilter'
            expression: 'item.type is "auth"'
          - type: 'ObjectFilter'
            expression: 'item.control is "done"'
          - type: 'ObjectFilter'
            expression: 'item.module_path is "pam_permit.so"'
---
check_id: 'PAM-SSH-DEFAULT-DENIES-AUTH'
method:
  - target: {os: ['Linux']}
    probe:
      - artifact: 'PamConfig'
        hint:
          problem: 'PAM ssh service must default to denying auth.'
          fix: >
            'Add "auth required pam_deny.so" or similar to the PAM ssh config.'
        match: 'NONE'
        baseline:
          - type: 'ForEach'
            expression: entries
          - type: 'ObjectFilter'
            expression: 'item.service is "ssh"'
          - type: 'ObjectFilter'
            expression: 'item.type is "auth"'
        filters:
          - type: 'ObjectFilter'
            expression: |
              (
                item.control inset ['required', 'requisite']
                AND item.module_path is 'pam_deny.so'
              )
              OR
              (
                item.control is '[success=ok new_authtok_reqd=ok default=die]'
                AND item.module_path is 'pam_unix.so'
                AND item.module_args is 'try_first_pass'
              )
---
check_id: 'PAM-SSH-NO-NULL-PASSWORDS'
method:
  - target: {os: ['Linux']}
    probe:
      - artifact: 'PamConfig'
        hint:
          problem: 'PAM ssh service allows unix null password accounts
             to login.'
          fix: |
            'Remove any password lines with "nullok" from the PAM ssh config.'
          format: >
            In service '{item.service}': {item.type} {item.control}
            {item.module_path} {item.module_args}
        match: 'ANY'
        baseline:
          - type: 'ForEach'
            expression: entries
          - type: 'ObjectFilter'
            expression: 'item.service is "ssh"'
          - type: 'ObjectFilter'
            expression: 'item.type is "password"'
          - type: 'ObjectFilter'
            expression: >
                item.control inset ["required", "requisite", "sufficient"]
          - type: 'ObjectFilter'
            expression: 'item.module_path contains "pam_unix.so"'
        filters:
          - type: 'ObjectFilter'
            expression: 'item.module_args contains "nullok"'
---
check_id: 'PAM-SECURE-DEFAULTS'
method:
  - target: {os: ['Linux']}
    probe:
      - artifact: 'PamConfig'
        hint:
          problem: "PAM 'other'(the default) config should only be used for
             denying/logging access."
          fix: "Remove any non pam_(deny|warn).so lines from the PAM 'other'
             config."
          format: >
            In service '{item.service}': {item.type} {item.control}
            {item.module_path} {item.module_args}"
        match: 'ANY'
        baseline:
          - type: 'ForEach'
            expression: entries
          - type: 'ObjectFilter'
            expression: 'item.service is "other"'
        filters:
          - type: 'ObjectFilter'
            expression: 'item.module_path notcontains "pam_deny.so"'
          - type: 'ObjectFilter'
            expression: 'item.module_path notcontains "pam_warn.so"'
---
check_id: 'PAM-EXTERNAL-CONFIG'
method:
  - target: {os: ['Linux']}
    probe:
      - artifact: 'PamConfig'
        hint:
          problem: 'PAM configuration refers to files outside of /etc/pam.d.'
          fix: 'Move all PAM configuration files to under /etc/pam.d'
          format: '{external_config}'
        match: 'ANY'
        filters:
          - type: 'ObjectFilter'
            expression: 'external_config isnot ""'
---
check_id: 'PAM-CONFIG-FILES-WRITABLE-BY-NON-ROOT-USER'
method:
  - target: {os:['Linux']}
    probe:
      - artifact: 'LinuxPamConfigs'
        hint:
          problem: >
             Files or folders in Pam configuration can be modified by
             non-privileged users.
          fix: >
             Make sure all files and folders used by Pam are owned by root
             and not modifiable by any other users.
          format: >
             {pathspec.path} user: {st_uid}, group: {st_gid}, mode: {st_mode}
        mode: PARALLEL
        result_context: 'RAW'
        filters:
          - type: 'StatFilter'
            expression: 'uid:!0'
          - type: 'StatFilter'
            expression: 'gid:!0 mode:0020 mask:7020'
          - type: 'StatFilter'
            expression: 'mode:0002 mask:7002'
