syntax = "proto2";

import "google/protobuf/any.proto";
import "grr_response_proto/api/output_plugin.proto";
import "grr_response_proto/api_utils.proto";
import "grr_response_proto/flows.proto";
import "grr_response_proto/jobs.proto";
import "grr_response_proto/output_plugin.proto";
import "grr_response_proto/semantic.proto";

package grr;

//
// Entities.
//

message ApiFlowDescriptor {
  optional string name = 1
      [(sem_type) = { description: "Flow name as registered in GRR." }];
  optional string friendly_name = 2
      [(sem_type) = { description: "Friendly flow name." }];
  optional string category = 3 [(sem_type) = { description: "Flow category." }];
  optional string doc = 4
      [(sem_type) = { description: "Flow documentation string." }];

  optional string args_type = 5
      [(sem_type) = { description: "Flow arguments type name." }];
  optional google.protobuf.Any default_args = 6 [(sem_type) = {
    description: "Default flow arguments.",
    dynamic_type: "GetDefaultArgsClass"
  }];

  repeated string behaviours = 7
      [(sem_type) = { description: "Flow behaviours." }];
  optional bool block_hunt_creation = 8
      [(sem_type) = { description: "Block hunt creation for the flow." }];
}

// Next id: 21
message ApiFlow {
  // Enum values here correspond to Flow.State values.

  enum State {
    RUNNING = 0;
    TERMINATED = 1;
    ERROR = 3;
    CLIENT_CRASHED = 4;
  }

  //   /grr_response_proto/flows.proto)

  optional string urn = 1
      [(sem_type) = { type: "SessionID", description: "Flow URN." }];
  optional string flow_id = 12
      [(sem_type) = { type: "ApiFlowId", description: "Flow id." }];
  optional string client_id = 15
      [(sem_type) = { type: "ApiClientId", description: "Client id." }];

  optional string name = 2 [(sem_type) = {
    description: "Flow name.",
  }];
  optional google.protobuf.Any args = 3 [(sem_type) = {
    description: "Flow arguments.",
    dynamic_type: "GetArgsClass"
  }];
  optional google.protobuf.Any progress = 16 [(sem_type) = {
    description: "Flow progress info.",
    dynamic_type: "GetProgressClass"
  }];
  optional FlowResultMetadata result_metadata = 17 [
    (sem_type) = { description: "Metadata about results returned by the flow." }
  ];
  optional FlowRunnerArgs runner_args = 4
      [(sem_type) = { description: "Flow runner arguments." }];
  optional State state = 5
      [(sem_type) = { description: "Current flow state." }];
  optional string error_description = 18 [(sem_type) = {
    description: "Describes the error that happened while executing the flow, "
                 "truncated if over 4 KB."
  }];
  optional uint64 started_at = 6 [
    (sem_type) = { type: "RDFDatetime", description: "When flow was created." }
  ];
  optional uint64 last_active_at = 7 [(sem_type) = {
    type: "RDFDatetime",
    description: "When flow was last active."
  }];
  optional string creator = 8
      [(sem_type) = { description: "Who started the flow." }];
  optional bool is_robot = 19 [
    (sem_type) = { description: "Whether the flow was created by a GRRWorker." }
  ];

  optional ApiDataObject state_data = 10
      [(sem_type) = { description: "Current flow state data." }];
  optional google.protobuf.Any store = 20 [(sem_type) = {
    description: "Current flow store data.",
    no_dynamic_type_lookup: true,
  }];
  optional FlowContext context = 11
      [(sem_type) = { description: "Current flow context." }];

  repeated ApiFlow nested_flows = 9
      [(sem_type) = { description: "Nested flows started by this flow." }];
  optional ApiFlowReference original_flow = 13 [(sem_type) = {
    description: "If this flow was copied, a reference to the "
                 "source flow.",
    label: HIDDEN,
  }];
  optional string internal_error = 14 [(sem_type) = {
    description: "An error that happened while reading the flow. This is "
                 "not an error while executing the flow but an internal data issue."
  }];
}

message ApiFlowReference {
  optional string flow_id = 1 [(sem_type) = {
    type: "ApiFlowId",
  }];
  optional string client_id = 2
      [(sem_type) = { type: "ApiClientId", description: "Client id." }];
}

message ApiFlowRequest {
  optional string request_id = 1;
  optional RequestState request_state = 2;
  repeated GrrMessage responses = 3;
}

message ApiFlowResult {
  optional google.protobuf.Any payload = 1 [(sem_type) = {
    description: "Result payload.",
    dynamic_type: "GetPayloadClass"
  }];
  reserved 2;
  optional uint64 timestamp = 3 [(sem_type) = {
    type: "RDFDatetime",
    description: "Timestamp indicating when result was written to the data "
                 "store."
  }];
  optional string tag = 4 [(sem_type) = {
    description: "Custom tag providing additional context about the result."
  }];
}

message ApiFlowLog {
  optional string log_message = 1;
  optional string flow_name = 2
      [(sem_type) = { description: "Human readable name for the session ID." }];
  optional string flow_id = 3
      [(sem_type) = { type: "ApiFlowId", description: "Flow id." }];
  optional uint64 timestamp = 4 [(sem_type) = {
    type: "RDFDatetime",
    description: "Timestamp indicating when this log message was written."
  }];
}

//
// Method arguments and results.
//

message ApiGetFlowArgs {
  optional string client_id = 1
      [(sem_type) = { type: "ApiClientId", description: "Client id." }];
  optional string flow_id = 2
      [(sem_type) = { type: "ApiFlowId", description: "Flow id." }];
}

message ApiCreateFlowArgs {
  optional string client_id = 1
      [(sem_type) = { type: "ApiClientId", description: "Client id." }];
  optional ApiFlow flow = 2;
  optional ApiFlowReference original_flow = 3;
}

message ApiCancelFlowArgs {
  optional string client_id = 1
      [(sem_type) = { type: "ApiClientId", description: "Client id." }];
  optional string flow_id = 2
      [(sem_type) = { type: "ApiFlowId", description: "Flow id." }];
}

message ApiListFlowRequestsArgs {
  optional string client_id = 1
      [(sem_type) = { type: "ApiClientId", description: "Client id." }];
  optional string flow_id = 2
      [(sem_type) = { type: "ApiFlowId", description: "Flow id." }];
  optional int64 offset = 3
      [(sem_type) = { description: "Results items starting offset." }];
  optional int64 count = 4
      [(sem_type) = { description: "Max number of results to fetch." }];
}

message ApiListFlowRequestsResult {
  repeated ApiFlowRequest items = 1
      [(sem_type) = { description: "Flow's requests list." }];
}

message ApiListFlowResultsArgs {
  optional string client_id = 1
      [(sem_type) = { type: "ApiClientId", description: "Client id." }];
  optional string flow_id = 2
      [(sem_type) = { type: "ApiFlowId", description: "Flow id." }];
  optional int64 offset = 3
      [(sem_type) = { description: "Results items starting offset." }];
  optional int64 count = 4
      [(sem_type) = { description: "Max number of results to fetch." }];
  optional string filter = 5 [(sem_type) = {
    description: "Return only results whose string representation "
                 "contains given substring."
                 "TODO: total_count is unset if a filter is set. "
  }];
  optional string with_tag = 6 [(sem_type) = {
    description: "Return only results that have a matching tag."
  }];
  optional string with_type = 7 [(sem_type) = {
    description: "Return only results that match the given type name."
  }];
}

message ApiListFlowResultsResult {
  repeated ApiFlowResult items = 1
      [(sem_type) = { description: "The flow results." }];
  optional int64 total_count = 2 [(sem_type) = {
    description: "Total count of items."
                 "TODO: Unset if a filter is set."
  }];
}

message ApiListFlowLogsArgs {
  optional string client_id = 1
      [(sem_type) = { type: "ApiClientId", description: "Client id." }];
  optional string flow_id = 2
      [(sem_type) = { type: "ApiFlowId", description: "Flow id." }];
  optional int64 offset = 3
      [(sem_type) = { description: "Results items starting offset." }];
  optional int64 count = 4
      [(sem_type) = { description: "Max number of results to fetch." }];
  optional string filter = 5 [(sem_type) = {
    description: "Return only results whose string representation "
                 "contains given substring."
  }];
}

// Next field ID: 4
message ApiListFlowLogsResult {
  reserved 1;
  repeated ApiFlowLog items = 3
      [(sem_type) = { description: "The hunt errors" }];
  optional int64 total_count = 2
      [(sem_type) = { description: "Total count of items." }];
}

message ApiGetFlowResultsExportCommandArgs {
  optional string client_id = 1
      [(sem_type) = { type: "ApiClientId", description: "Client id." }];
  optional string flow_id = 2
      [(sem_type) = { type: "ApiFlowId", description: "Flow id." }];
}

message ApiGetFlowResultsExportCommandResult {
  optional string command = 1
      [(sem_type) = { description: "Export command for flow results." }];
}

message ApiListFlowOutputPluginsArgs {
  optional string client_id = 1
      [(sem_type) = { type: "ApiClientId", description: "Client id." }];
  optional string flow_id = 2
      [(sem_type) = { type: "ApiFlowId", description: "Flow id." }];
}

message ApiListFlowOutputPluginsResult {
  repeated ApiOutputPlugin items = 2;
}

message ApiListFlowOutputPluginLogsArgs {
  optional string client_id = 1
      [(sem_type) = { type: "ApiClientId", description: "Client id." }];
  optional string flow_id = 2
      [(sem_type) = { type: "ApiFlowId", description: "Flow id." }];
  optional string plugin_id = 3
      [(sem_type) = { description: "Output plugin id." }];

  optional int64 offset = 4
      [(sem_type) = { description: "Logs starting offset." }];
  optional int64 count = 5
      [(sem_type) = { description: "Max number of log entries." }];
}

message ApiListFlowOutputPluginLogsResult {
  repeated OutputPluginBatchProcessingStatus items = 1
      [(sem_type) = { description: "Log entries." }];

  optional int64 total_count = 2
      [(sem_type) = { description: "Total count of items." }];
}

message ApiListFlowOutputPluginErrorsArgs {
  optional string client_id = 1
      [(sem_type) = { type: "ApiClientId", description: "Client id." }];
  optional string flow_id = 2
      [(sem_type) = { type: "ApiFlowId", description: "Flow id." }];
  optional string plugin_id = 3
      [(sem_type) = { description: "Output plugin id." }];

  optional int64 offset = 4
      [(sem_type) = { description: "Errors starting offset." }];
  optional int64 count = 5
      [(sem_type) = { description: "Max number of errors." }];
}

message ApiListFlowOutputPluginErrorsResult {
  repeated OutputPluginBatchProcessingStatus items = 1
      [(sem_type) = { description: "Errors entries." }];

  optional int64 total_count = 2
      [(sem_type) = { description: "Total count of items." }];
}

message ApiGetFlowFilesArchiveArgs {
  enum ArchiveFormat {
    ZIP = 0;
    TAR_GZ = 1;
  }

  optional string client_id = 1
      [(sem_type) = { type: "ApiClientId", description: "Client id." }];
  optional string flow_id = 2
      [(sem_type) = { description: "Flow id.", type: "ApiFlowId" }];
  optional ArchiveFormat archive_format = 3;
}

message ApiListFlowDescriptorsResult {
  repeated ApiFlowDescriptor items = 1;
}

message ApiListFlowsArgs {
  optional string client_id = 1
      [(sem_type) = { type: "ApiClientId", description: "Client id." }];
  optional int64 offset = 2 [(sem_type) = { description: "Starting offset." }];
  optional int64 count = 3
      [(sem_type) = { description: "Max number of flows to fetch." }];

  // Filtering criteria.
  optional bool top_flows_only = 4 [(sem_type) = {
    description: "If set, only the top flow objects will be fetched, nested "
                 "flow will be ignored."
  }];
  optional uint64 min_started_at = 5 [(sem_type) = {
    type: "RDFDatetime",
    description: "Only return flows that were created after the given "
                 "timestamp (inclusive)."
  }];
  optional uint64 max_started_at = 6 [(sem_type) = {
    type: "RDFDatetime",
    description: "Only return flows that were created before the given "
                 "timestamp (inclusive)."
  }];
  optional bool human_flows_only = 7 [(sem_type) = {
    description: "If set, only flows created by humans will be fetched, robot "
                 "flows will be ignored."
  }];
}

message ApiListFlowsResult {
  repeated ApiFlow items = 1;
}

message ApiGetExportedFlowResultsArgs {
  optional string client_id = 1
      [(sem_type) = { type: "ApiClientId", description: "Client id." }];
  optional string flow_id = 2
      [(sem_type) = { type: "ApiFlowId", description: "Flow id." }];
  optional string plugin_name = 3
      [(sem_type) = { description: "Instant output plugin name." }];
}

message ApiExplainGlobExpressionArgs {
  optional string glob_expression = 1;
  optional uint32 example_count = 2;
  optional string client_id = 3 [(sem_type) = { type: "ApiClientId" }];
}

message ApiExplainGlobExpressionResult {
  repeated GlobComponentExplanation components = 1;
}

message ApiScheduledFlow {
  optional string scheduled_flow_id = 1;
  optional string client_id = 2;
  optional string creator = 3;
  optional string flow_name = 4;
  optional google.protobuf.Any flow_args = 5;
  optional FlowRunnerArgs runner_args = 6;
  optional uint64 create_time = 7 [(sem_type) = {
    type: "RDFDatetime",
  }];
  optional string error = 8;
}

message ApiListScheduledFlowsArgs {
  optional string client_id = 1;
  optional string creator = 2;
}

message ApiListScheduledFlowsResult {
  repeated ApiScheduledFlow scheduled_flows = 1;
}

message ApiUnscheduleFlowArgs {
  optional string client_id = 1;
  reserved 2;
  optional string scheduled_flow_id = 3;
}

message ApiUnscheduleFlowResult {}
