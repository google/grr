syntax = "proto2";

import "grr_response_proto/jobs.proto";
import "grr_response_proto/semantic.proto";

package grr;

//
// Entities.
//

message ApiReportDescriptor {
  enum ReportType {
    CLIENT = 0 [(description) = "Client"];
    FILE_STORE = 1 [(description) = "File store"];
    SERVER = 2 [(description) = "Server"];
  }

  optional ReportType type = 1 [(sem_type) = {
    description: "Top-level identifier in the report hierarchy."
  }];

  optional string name = 2 [(sem_type) = {
    description: "Second-level identifier in the report hierarchy. "
                 "Also the name of the corresponding class in report_plugins.py. "
                 "Eg 'ClientsActivityReportPlugin'."
  }];

  optional string title = 3
      [(sem_type) = { description: "UI-friendly displayed title." }];

  optional string summary = 4 [(sem_type) = {
    description: "UI-friendly displayed summary of what the report reports."
  }];

  optional bool requires_time_range = 5 [(sem_type) = {
    description: "Indicates whether the report needs a time range."
  }];
}

message ApiReport {
  optional ApiReportDescriptor desc = 1;
  optional ApiReportData data = 2;
}

message ApiReportData {
  option (semantic) = {
    union_field: "representation_type"
  };

  enum RepresentationType {
    UNDEFINED = 0 [(description) = "Undefined"];
    reserved 1;
    reserved 2;
    // TODO: deprecate audit charts and the whole reporting
    // subsystem.
    AUDIT_CHART = 3 [(description) = "Audit chart"];
  }

  optional RepresentationType representation_type = 1;

  reserved 2;
  reserved 3;
  reserved 4;
  optional ApiAuditChartReportData audit_chart = 5;
}

message ApiAuditChartReportData {
  repeated string used_fields = 1 [(sem_type) = {
    description: "Names of the AuditEvent fields used by the report."
  }];

  repeated AuditEvent rows = 2
      [(sem_type) = { description: "Data to be shown in the chart." }];
}

//
// Method arguments and results.
//

message ApiGetReportArgs {
  optional string name = 1 [(sem_type) = {
    description: "Identifier in the report hierarchy. Also the name of the "
                 "corresponding class in report_plugins.py. "
                 "Eg 'ClientsActivityReportPlugin'."
  }];

  optional uint64 start_time = 2 [(sem_type) = {
    type: "RDFDatetime",
    description: "Earliest timestamp of data points to consider. "
                 "Ignored by reports with requires_time_range set to false."
  }];

  optional uint64 duration = 3 [(sem_type) = {
    type: "DurationSeconds",
    description: "Length of the time range to consider. "
                 "Ignored by reports with requires_time_range set to false."
  }];

  optional string client_label = 4 [(sem_type) = {
    description: "Client label used by label-specific reports. Optional."
  }];
}

message ApiListReportsResult {
  repeated ApiReport reports = 1
      [(sem_type) = { description: "The report list." }];
}

message FieldValue {
  enum FieldType {
    UNKNOWN = 0;
    STRING = 2;
    NUMBER = 1;
  }
  optional FieldType field_type = 1;
  optional string string_value = 2;
  optional int64 number_value = 3;
}

message ApiIncrementCounterMetricArgs {
  optional string metric_name = 1
      [(sem_type) = { description: "Unique name for the counter metric." }];

  repeated FieldValue field_values = 2
      [(sem_type) = { description: "Metric field values." }];
}

message ApiIncrementCounterMetricResult {}
