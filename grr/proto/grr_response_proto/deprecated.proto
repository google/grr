/**
 * NOTE: DO NOT USE PROTOBUFS FROM THIS FILE.
 *
 * This file contains definitions of deleted protos. They have to be preserved
 * so that newer versions of API client library can safely work with older
 * server releases.
 */
syntax = "proto2";

import "google/protobuf/any.proto";
import "grr_response_proto/anomaly.proto";
import "grr_response_proto/artifact.proto";
import "grr_response_proto/jobs.proto";
import "grr_response_proto/knowledge_base.proto";
import "grr_response_proto/output_plugin.proto";
import "grr_response_proto/semantic.proto";

package grr;

message CollectArtifactDependenciesArgs {
  repeated string artifact_list = 1 [(sem_type) = {
    description: "A list of Artifact names to collect dependencies for.",
    type: "ArtifactName",
  }];
}

message ApiNotificationDiscoveryReference {
  optional string client_id = 1 [(sem_type) = {
    type: "ApiClientId",
    description: "The client this notification is about."
  }];
}

message ApiNotificationFileDownloadReference {
  optional string path = 1 [(sem_type) = {
    type: "RDFURN",
    description: "The download path for the file."
  }];
}

message ApiListCronJobFlowsArgs {
  optional string cron_job_id = 1
      [(sem_type) = { type: "ApiCronJobId", description: "Cron job id." }];
  optional int64 offset = 2 [(sem_type) = { description: "Starting offset." }];
  optional int64 count = 3
      [(sem_type) = { description: "Max number of flows to fetch." }];
}

message ApiGetCronJobFlowArgs {
  optional string cron_job_id = 1
      [(sem_type) = { type: "ApiCronJobId", description: "Cron job id." }];
  optional string flow_id = 2
      [(sem_type) = { type: "ApiFlowId", description: "Flow id." }];
}

message GlobalNotification {
  enum Type {
    INFO = 0;
    WARNING = 1;
    ERROR = 2;
  }
  optional Type type = 1;

  optional string header = 2;
  optional string content = 3;
  optional string link = 4;

  optional uint64 show_from = 5 [(sem_type) = {
    type: "RDFDatetime",
    description: "Notification will be shown after this time."
  }];
  optional uint64 duration = 6 [(sem_type) = {
    type: "DurationSeconds",
    description: "Duration of this notification."
  }];
}

message GlobalNotificationSet {
  repeated GlobalNotification notifications = 1;
}

message ApiListPendingGlobalNotificationsResult {
  repeated GlobalNotification items = 1 [
    (sem_type) = { description: "The list of pending global notifications." }
  ];
}

message ApiDeletePendingGlobalNotificationArgs {
  optional GlobalNotification.Type type = 1 [(sem_type) = {
    description: "The type of the global notification to delete."
  }];
}

message OutputPluginVerificationResult {
  optional string plugin_id = 1 [(sem_type) = {
    description: "String identifying the output plugin being checked."
  }];
  optional OutputPluginDescriptor plugin_descriptor = 2 [(sem_type) = {
    description: "Descriptor of the plugin that's being checked."
  }];

  enum Status {
    N_A = 0;
    SUCCESS = 1;
    WARNING = 2;
    FAILURE = 3;
  }
  optional Status status = 3;
  optional string status_message = 4;

  optional uint64 timestamp = 5 [
    (sem_type) = { type: "RDFDatetime", description: "Timestamp of the check." }
  ];
}

message OutputPluginVerificationResultsList {
  repeated OutputPluginVerificationResult results = 1;
}

message MemoryInformation {
  option (semantic) = {
    description: "Describe the memory geometry."
  };

  optional PathSpec device = 1;
  repeated BufferReference runs = 2;
  optional uint64 cr3 = 3;
}

message PluginRequest {
  optional string plugin = 2 [(sem_type) = {
    description: "The plugin name to run.",
  }];

  optional Dict args = 3 [(sem_type) = {
    description: "The args to the plugin.",
  }];
}

message RekallRequest {
  optional Iterator iterator = 1 [(sem_type) = { label: HIDDEN }];

  repeated PluginRequest plugins = 2 [(sem_type) = {
    description: "We can execute multiple plugins in the same session. "
                 "This can take advantage of caching in the session to be more efficient."
  }];

  optional PathSpec device = 4 [(sem_type) = {
    description: "The raw device to use.",
  }];

  optional Dict session = 6 [(sem_type) = {
    description: "These parameters are used to initialize the session.",
  }];

  repeated RekallProfile profiles = 9 [(sem_type) = {
    description: "Profiles sent by the server to store on the client.",
    label: HIDDEN
  }];
}

message RekallResponse {
  // Deprecated. Anything written in this field will be compressed and placed
  // into the compressed_json_messages field upon serialization.
  optional string json_messages = 1;
  optional bytes compressed_json_messages = 7
      [(sem_type) = { type: "ZippedJSONBytes" }];

  optional string json_context_messages = 5;

  optional string plugin = 2;

  optional string client_urn = 3 [(sem_type) = {
    type: "ClientURN",
    description: "The client this response comes from."
  }];

  optional string missing_profile = 4 [(sem_type) = {
    description: "Missing profiles that should be retrieved from "
                 "the server."
  }];

  optional string repository_version = 6 [
    (sem_type) = {
      description: "The version of the repository we want to use."
    },
    default = "v1.0"
  ];

  repeated string downloaded_files = 8 [(sem_type) = {
    description: "A list of downloaded files.",
    type: "RDFURN",
  }];
}

message RekallProfile {
  optional string name = 1
      [(sem_type) = { description: "The name of this profile." }];

  optional bytes data = 2
      [(sem_type) = { description: "A Rekall profile as a data blob." }];

  optional string version = 3
      [(sem_type) = { description: "The version of this profile." }];

  enum Compression {
    NONE = 0;
    GZIP = 1;
  }

  optional Compression compression = 4 [
    (sem_type) = {
      description: "Type of compression carried in the data field."
    },
    default = GZIP
  ];
}

message AnalyzeClientMemoryArgs {
  optional RekallRequest request = 2 [(sem_type) = {
    description: "A request for the client's Rekall subsystem.",
  }];

  optional bool debug_logging = 4 [
    (sem_type) = {
      description: "Use DEBUG level logging.",
      friendly_name: "DEBUG logging."
    },
    default = false
  ];

  optional uint64 max_file_size_download = 5 [
    (sem_type) = {
      description: "Obtain at most max_file_size_download bytes of each file "
                   "outputted by Rekall."
    },
    default = 35433480192
  ];  // 33 Gb

  optional string component_version = 6 [
    (sem_type) = {
      description: "The version of component to use.",
      label: ADVANCED,
    },
    default = "1.6.0"
  ];
}

message ApiListStatsStoreMetricsMetadataArgs {
  enum Component {
    WORKER = 0;
    FRONTEND = 1;
    ADMIN_UI = 2;
  }
  optional Component component = 1;
}

message ApiListStatsStoreMetricsMetadataResult {
  repeated MetricMetadata items = 1;
}

message ApiGetStatsStoreMetricArgs {
  enum Component {
    WORKER = 0;
    FRONTEND = 1;
    ADMIN_UI = 2;
  }
  optional Component component = 1;
  optional string metric_name = 2;

  optional uint64 start = 3 [(sem_type) = {
    type: "RDFDatetime",
    description: "Fetch metrics data starting from this timestamp. If "
                 "not set, will default to 1 hour ago."
  }];
  optional uint64 end = 4 [(sem_type) = {
    type: "RDFDatetime",
    description: "Fetch metrics data from the interval ending with "
                 "this timestamp. If not set, will default to the current time."
  }];

  optional uint64 rate = 7 [(sem_type) = {
    type: "DurationSeconds",
    description: "If set, metric's rate over given window will be returned "
                 "instead of plain values."
  }];

  enum DistributionHandlingMode {
    DH_SUM = 0 [(description) = "Sum of all values recorded in a distribution "
                                "will be fetched."];
    DH_COUNT = 1
        [(description) = "Number of all values recorded in a distribution "
                         "will be fetched."];
  }
  optional DistributionHandlingMode distribution_handling_mode = 5 [(sem_type) = {
    description: "Determines which values to fetch when dealing with distributions."
  }];

  enum AggregationMode {
    AGG_SUM = 0 [(description) = "Values will be summed."];
    AGG_MEAN = 1 [(description) = "Mean value will be calculated."];
    AGG_NONE = 2 [(description) = "No aggregation will be performed."];
  }
  optional AggregationMode aggregation_mode = 6 [(sem_type) = {
    description: "Aggregation method. As metrics are usually collected across "
                 "multiple processes, most of the time they have to be aggregated."
  }];
}

message StatsStoreFieldValue {
  optional MetricFieldDefinition.FieldType field_type = 1;

  optional string str_value = 2;
  optional int64 int_value = 3;
}

message StatsStoreValue {
  optional MetricMetadata.ValueType value_type = 1;

  optional string str_value = 2;
  optional int64 int_value = 3;
  optional float float_value = 4;
  optional Distribution distribution_value = 5;

  repeated StatsStoreFieldValue fields_values = 6;
}

message StatsStoreEntry {
  optional string process_id = 1 [(sem_type) = {
    description: "Stats identifier for the monitored process, e.g 'frontend_2'."
  }];
  optional string metric_name = 2
      [(sem_type) = { description: "Name of the metric." }];
  optional StatsStoreValue metric_value = 3 [(sem_type) = {
    description: "Value of the metric at a given point in time."
  }];
  optional uint64 timestamp = 4 [(sem_type) = {
    type: "RDFDatetime",
    description: "Timestamp for when the metric value was observed.",
  }];
}

message ApiAff4AttributeDescriptor {
  optional string name = 1;
}

message ApiListAff4AttributeDescriptorsResult {
  repeated ApiAff4AttributeDescriptor items = 1;
}

// Next field: 9
message ACLToken {
  optional string username = 1;

  // A reason for access (e.g. case name, investigation id).
  optional string reason = 2;

  reserved 3;

  optional uint64 expiry = 5 [(sem_type) = {
    type: "RDFDatetime",
    description: "When does this token expire?",
  }];

  // The IP this request originated from as well as proxies on the way.
  repeated string source_ips = 6;

  // The issuing process.
  optional string process = 7;

  reserved 8;
}

message PendingFlowTermination {
  reserved 1;
}

message PlistValueFilterArgs {
  optional PlistRequest request = 1;
}

message PlistRequest {
  optional PathSpec pathspec = 1;
  optional string context = 2;
  optional string query = 3;
}


enum Match {
  // Quantifies how many results indicate a problem.
  NONE = 0;  // No tested items match.
  ONE = 1;   // Only one tested item matches.
  ANY = 2;   // One or more tested items match.
  ALL = 3;   // All tested items match.
  SOME = 4;  // More than one tested item matches.
}

message Check {
  optional string check_id = 1;
  repeated Method method = 2;
  repeated Match match = 3;
  optional Target target = 4;
  optional Hint hint = 5;
}

message Method {
  repeated Probe probe = 1;
  repeated Match match = 2;
  repeated Dict resource = 3;
  optional Target target = 4;
  optional Hint hint = 5;
}

message Probe {
  enum Mode {
    SERIAL = 0;
    PARALLEL = 1;
  }
  enum ResultContext {
    UNKNOWN_RESULT_CONTEXT = 0;
    PARSER = 1;
    ANOMALY = 2;
    RAW = 3;
  }
  optional string artifact = 1;
  repeated string parser = 2;
  optional Mode mode = 3;
  repeated Filter baseline = 4;
  repeated Filter filters = 5;
  repeated Match match = 6;
  optional Target target = 7;
  optional Hint hint = 8;
  optional ResultContext result_context = 9;
}

message Filter {
  optional string type = 1;
  optional string expression = 2;
  optional Hint hint = 5;
}

message CheckResult {
  optional string check_id = 1;
  repeated Anomaly anomaly = 2;
}

message CheckResults {
  optional KnowledgeBase kb = 1;
  repeated CheckResult result = 2;
}

message Hint {
  optional string problem = 1;
  optional string fix = 2;
  optional string format = 3;
  optional string summary = 4;
  optional uint64 max_results = 5;
}

message Target {
  repeated string cpe = 1;
  repeated string os = 2;
  repeated string label = 3;
}

message CheckFlowArgs {
  repeated string only_os = 1;
  repeated string only_cpe = 2;
  repeated string only_label = 3;
  repeated uint64 max_findings = 4;
  repeated string restrict_checks = 5;
}

message CAEnrolerArgs {
  optional Certificate csr = 1;
}

message CollectSingleFileArgs {
  optional string path = 1;
  optional uint64 max_size_bytes = 2 [(sem_type) = { type: "ByteSize" }];
}

message CollectSingleFileResult {
  optional StatEntry stat = 1;
  optional Hash hash = 2;
}

message CollectSingleFileProgress {
  enum Status {
    UNDEFINED = 0;
    IN_PROGRESS = 1;
    COLLECTED = 2;
    NOT_FOUND = 3;
    FAILED = 4;
  }
  optional Status status = 1;
  optional CollectSingleFileResult result = 2;
  optional string error_description = 3;
}

message ClientActionRequest {
  optional string client_id = 1;
  optional string flow_id = 2;
  optional uint64 request_id = 3;
  optional string action_identifier = 4;
  optional google.protobuf.Any action_args = 5;
  optional uint64 cpu_limit_ms = 6;
  optional uint64 network_bytes_limit = 7;
  optional uint64 runtime_limit_us = 52;
}

message ApiClientActionRequest {
  optional uint64 task_id = 1;
  optional uint64 leased_until = 2;
  optional string session_id = 3;
  optional string client_action = 4;
  repeated GrrMessage responses = 5;
}

message ApiListClientActionRequestsArgs {
  optional string client_id = 1;
  optional bool fetch_responses = 2;
}

message ApiListClientActionRequestsResult {
  repeated ApiClientActionRequest items = 1;
}

message UninstallArgs {
  optional bool kill = 1 [(sem_type) = {
    description: "Kills the client if set.",
  }];
}

message UpdateClientArgs {
  reserved 1;
  optional string binary_path = 2 [(sem_type) = {
    description: "Identifies the binary uploaded to GRR server that has "
                 "to be run on the client to perform the update.",
  }];
}

message KeepAliveArgs {
  optional uint64 duration = 1 [
    (sem_type) = {
      type: "DurationSeconds",
      description: "Until when should the client stay in the fast poll mode.",
    },
    default = 3600
  ];
}

message CollectEfiHashesResponse {
  optional string eficheck_version = 1;
  optional string boot_rom_version = 2;
  optional ExecuteBinaryResponse response = 3;
}

message DumpEfiImageResponse {
  optional string eficheck_version = 1;
  optional PathSpec path = 2 [(sem_type) = {
    description: "Temporary path to the flash image.",
  }];
  optional ExecuteBinaryResponse response = 3;
}

message EficheckConfig {
  reserved 1;
  optional string cmd_path = 2;
}

message EficheckFlowArgs {
  reserved 1;
  optional string cmd_path = 2
      [default = "/usr/libexec/firmwarecheckers/eficheck/eficheck"];
}

message EfiCollection {
  optional string eficheck_version = 1 [(sem_type) = {
    description: "Version of eficheck used to collect the data."
  }];
  optional string boot_rom_version = 2
      [(sem_type) = { description: "Boot ROM version." }];
  repeated EfiEntry entries = 3
      [(sem_type) = { description: "The hashes of the collection." }];
}

message EfiEntry {
  optional uint32 volume_type = 1
      [(sem_type) = { description: "The volume type." }];
  optional uint64 address = 2
      [(sem_type) = { description: "The entry address." }];
  optional uint32 size = 3 [(sem_type) = { description: "The entry size." }];
  optional string guid = 4 [(sem_type) = { description: "The EFI GUID." }];
  optional string hash = 5 [(sem_type) = { description: "The hash value." }];
  optional uint32 flags = 6 [(sem_type) = {
    description: "A bit field of flags that describe the volume "
                 "(known=1, volatile=2, ffs=4)."
  }];
  optional uint32 index = 7
      [(sem_type) = { description: "The entry's volume index." }];
}

message FindFilesArgs {
  reserved 3, 4;

  optional FindSpec findspec = 1 [(sem_type) = {
    description: "A find operation specification.",
  }];
}

message SendFileRequest {
  optional PathSpec pathspec = 1 [(sem_type) = {
    description: "The pathspec for the file to retrieve.",
  }];

  optional NetworkAddress.Family address_family = 2 [
    (sem_type) = {
      description: "address family to use (AF_INET or AF_INET6).",
    },
    default = INET
  ];

  optional string host = 3 [(sem_type) = {
    description: "Hostname or IP to send the file to.",
  }];

  optional uint64 port = 4 [
    (sem_type) = {
      description: "Port number on the listening server.",
    },
    default = 12345
  ];

  optional bytes key = 5 [(sem_type) = {
    type: "AES128Key",
    description: "An encryption key given in hex representation.",
  }];

  optional bytes iv = 6 [(sem_type) = {
    type: "AES128Key",
    description: "The iv for AES, also given in hex representation.",
  }];
}

message FingerprintFileArgs {
  optional PathSpec pathspec = 1 [(sem_type) = {
    description: "The file path to fingerprint.",
  }];
}

message FingerprintFileResult {
  optional string file_urn = 1 [(sem_type) = {
    type: "RDFURN",
    description: "The URN of the file fingerprinted",
  }];
  optional Hash hash_entry = 2 [(sem_type) = {
    description: "File hash object.",
  }];
}

message ApiStatsStoreMetricDataPoint {
  optional uint64 timestamp = 1 [(sem_type) = {
    type: "RDFDatetime",
    description: "Timestamp of the data point."
  }];
  optional double value = 2
      [(sem_type) = { description: "Value corresponding to the timestamp." }];
}

message ApiStatsStoreMetric {
  optional string metric_name = 1;
  optional uint64 start = 2 [(sem_type) = {
    type: "RDFDatetime",
  }];
  optional uint64 end = 3 [(sem_type) = {
    type: "RDFDatetime",
  }];
  repeated ApiStatsStoreMetricDataPoint data_points = 4;
}

message ApiGetClientLoadStatsArgs {
  optional string client_id = 1
      [(sem_type) = { type: "ApiClientId", description: "Client id." }];

  optional uint64 start = 2 [(sem_type) = {
    type: "RDFDatetime",
    description: "Fetch client load stats data starting from this "
                 "timestamp. If not set, will default to 30 minutes ago."
  }];
  optional uint64 end = 3 [(sem_type) = {
    type: "RDFDatetime",
    description: "Fetch client load stats data from the interval "
                 "ending with this timestamp. If not set, will default to the current "
                 "time."
  }];

  enum Metric {
    CPU_PERCENT = 0;
    CPU_SYSTEM = 1;
    CPU_USER = 2;

    IO_READ_BYTES = 3;
    IO_WRITE_BYTES = 4;
    IO_READ_OPS = 5;
    IO_WRITE_OPS = 6;

    NETWORK_BYTES_RECEIVED = 7;
    NETWORK_BYTES_SENT = 8;

    MEMORY_PERCENT = 9;
    MEMORY_RSS_SIZE = 10;
    MEMORY_VMS_SIZE = 11;
  }
  optional Metric metric = 5;
}

message ApiGetClientLoadStatsResult {
  repeated ApiStatsStoreMetricDataPoint data_points = 1;
}

message ExpandedArtifact {
  required string name = 1 [(sem_type) = {
    description: "The name of the artifact.",
    type: "ArtifactName",
  }];
  repeated ExpandedSource sources = 2
      [(sem_type) = { description: "The sources and what they depend on." }];
  repeated string provides = 3 [(sem_type) = {
    description: "A list of knowledgebase values this artifact provides.",
  }];
  optional bool requested_by_user = 4 [
    (sem_type) = {
      description: "Whether the artifact is requested by the user or scheduled"
                   " for collection as a KnowledgeBase dependency."
    },
    default = true
  ];
}

message ExpandedSource {
  required ArtifactSource base_source = 1
      [(sem_type) = { description: "The base source." }];
  optional PathSpec.PathType path_type = 6
      [(sem_type) = { description: "Path Type" }];
  optional uint64 max_bytesize = 7 [(sem_type) = {
    type: "ByteSize",
    description: "File Finder Download Action Option: The maximum byte size of "
                 "files we will download."
  }];
  optional int32 max_number_files = 8 [(sem_type) = {
    description: "File Finder Action Option: The maximum number of "
                 "results to get."
  }];
  repeated ExpandedSource artifact_sources = 9 [(sem_type) = {
    description: "Extended sources for ArtifactFiles collection."
  }];
}

message ClientArtifactCollectorResult {
  repeated CollectedArtifact collected_artifacts = 1 [(sem_type) = {
    description: "The results of the single collected artifacts."
  }];
  optional KnowledgeBase knowledge_base = 2 [(sem_type) = {
    description: "The knowledge base containing information about the client."
  }];
}

message CollectedArtifact {
  required string name = 1 [(sem_type) = {
    description: "The name of the artifact.",
    type: "ArtifactName",
  }];
  repeated ClientActionResult action_results = 2 [(sem_type) = {
    description: "The results from the performed client actions."
  }];
}

message ClientArtifactCollectorArgs {
  repeated ExpandedArtifact artifacts = 1
      [(sem_type) = { description: "A list of artifacts." }];
  optional KnowledgeBase knowledge_base = 2 [(sem_type) = {
    description: "The knowledge base containing information about the client."
  }];
  // Removed, since it wasn't used.
  // optional bool use_tsk = 3
  reserved 3;
  optional bool apply_parsers = 6 [
    (sem_type) = {
      description: "If True, apply any relevant parser to the collected data. "
                   "If False, return the raw collected data e.g. Files or Registry Keys.",
      label: ADVANCED,
    },
    default = true
  ];
  optional bool ignore_interpolation_errors = 7 [
    (sem_type) = {
      description: "If true, don't die if %%users.homedir%% and similar fail"
                   " to expand. It's common on windows for some user attributes to be"
                   " missing if users have never logged in. Enable this when you have"
                   " multiple artifacts or paths and want to report partial results.",
    },
    default = false
  ];
  optional uint64 max_file_size = 8 [
    (sem_type) = {
      type: "ByteSize",
      description: "The maximum size of files we will download in bytes,"
                   " 500MB by default.",
      label: ADVANCED
    },
    default = 500000000
  ];
}

message ApiStackChartReportData {
  repeated ApiReportDataSeries2D data = 1
      [(sem_type) = { description: "What the report contains." }];

  repeated ApiReportTickSpecifier x_ticks = 2 [(sem_type) = {
    description: "X axis ticks. See: github.com/flot/flot/blob/master/API.md"
  }];

  repeated ApiReportTickSpecifier y_ticks = 3 [(sem_type) = {
    description: "Y axis ticks. See: github.com/flot/flot/blob/master/API.md"
  }];

  optional float bar_width = 4 [
    (sem_type) = { description: "Width of the bars displayed on the chart." }
  ];
}

message ApiPieChartReportData {
  repeated ApiReportDataPoint1D data = 1
      [(sem_type) = { description: "What the report contains." }];
}

message ApiLineChartReportData {
  repeated ApiReportDataSeries2D data = 1
      [(sem_type) = { description: "What the report contains." }];
}

message ApiReportDataPoint1D {
  optional float x = 1;

  optional string label = 2
      [(sem_type) = { description: "The series is labeled with this string." }];
}

message ApiReportDataSeries2D {
  optional string label = 1
      [(sem_type) = { description: "The series is labeled with this string." }];

  repeated ApiReportDataPoint2D points = 2;
}

message ApiReportDataPoint2D {
  optional float x = 1;
  optional float y = 2;
}

message ApiReportTickSpecifier {
  optional float x = 1;
  optional string label = 2;
}
