
// The following messages are used to start flows in GRR.

syntax = "proto2";

import "google/protobuf/any.proto";
import "grr_response_proto/export.proto";
import "grr_response_proto/jobs.proto";
import "grr_response_proto/semantic.proto";

package grr;

message OutputPluginDescriptor {
  optional string plugin_name = 1
      [(sem_type) = { description: "The name of the output plugin." }];

  // TODO: Rename this field and add DEPRECATED prefix.
  // DEPRECATED. Please use `args` instead.
  optional bytes plugin_args = 2 [(sem_type) = {
    dynamic_type: "GetPluginArgsClass",
    description: "DEPRECATED. Please use `args` instead. The parameters for "
                 "this plugin. Must be an instance of the named plugin's "
                 "args_type."
  }];

  optional google.protobuf.Any args = 3 [(sem_type) = {
    no_dynamic_type_lookup: true,
    description: "This is a helper field used by ApiCreateHuntHandler. It must "
                 "be an instance of the named plugin's args_type."
  }];
}

message OutputPluginState {
  optional OutputPluginDescriptor plugin_descriptor = 1;
  optional AttributedDict plugin_state = 2;
}

// Next id: 7
message OutputPluginBatchProcessingStatus {
  enum Status {
    SUCCESS = 0;  // Batch was successfully processed.
    ERROR = 1;    // Batch wasn't processed due to an error.
  }

  optional Status status = 1 [
    (sem_type) = {
      description: "Was this batch successfully processed or not?"
    },
    default = SUCCESS
  ];

  optional OutputPluginDescriptor plugin_descriptor = 6 [(sem_type) = {
    description: "Descriptor of the output plugin responsible for this result."
  }];

  optional string summary = 3
      [(sem_type) = { description: "Summary message." }];

  optional uint64 batch_index = 4
      [(sem_type) = { description: "Number of the batch being processed." }];

  optional uint64 batch_size = 5
      [(sem_type) = { description: "Size of the batch beting processed." }];
}

message EmailOutputPluginArgs {
  optional string email_address = 1 [(sem_type) = {
    type: "DomainEmailAddress",
    description: "The email address that messages will be sent to.",
  }];
  optional uint64 emails_limit = 2 [default = 100];
}

message BigQueryOutputPluginArgs {
  optional ExportOptions export_options = 2
      [(sem_type) = { description: "Export options.", label: ADVANCED }];
  optional bool convert_values = 3 [
    (sem_type) = {
      description: "If true, convert values for export-friendly format.",
      label: HIDDEN
    },
    default = true
  ];
  // Whether to export fields of type `bytes` using base64-encoding.
  //
  // By default, all binary data is omitted in the export results to avoid
  // issues with UTF-8 encoding. If this option is enabled, the binary data is
  // going to be exported as a base64-encoded string value.
  optional bool base64_bytes_export = 4;
}

message SplunkOutputPluginArgs {
  repeated string annotations = 1 [(sem_type) = {
    description: "Annotations to add to exported data. This field can be "
                 "used to differentiate sets of exported data inside a "
                 "particular exported type. e.g. data collected by users "
                 "vs. data collected by cronjob."
  }];
  optional string index = 2
      [(sem_type) = { description: "The Splunk Index to assign to events." }];
}

message ElasticsearchOutputPluginArgs {
  repeated string tags = 1 [(sem_type) = {
    description: "Tags to add to exported data. This field can be "
                 "used to differentiate sets of exported data inside a "
                 "particular exported type. e.g. data collected by users "
                 "vs. data collected by cronjob."
  }];
  optional string index = 2 [(sem_type) = {
    description: "The Elasticsearch index to place the events in"
  }];
}
