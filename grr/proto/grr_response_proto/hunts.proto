syntax = "proto2";

import "google/protobuf/any.proto";
import "grr_response_proto/flows.proto";
import "grr_response_proto/jobs.proto";
import "grr_response_proto/output_plugin.proto";
import "grr_response_proto/semantic.proto";

package grr;

message HuntArgumentsStandard {
  optional string flow_name = 1;
  optional google.protobuf.Any flow_args = 2
      [(sem_type) = { no_dynamic_type_lookup: true }];
}

message VariableHuntFlowGroup {
  repeated string client_ids = 1;
  optional string flow_name = 2;
  optional google.protobuf.Any flow_args = 3
      [(sem_type) = { no_dynamic_type_lookup: true }];
}

message HuntArgumentsVariable {
  repeated VariableHuntFlowGroup flow_groups = 1;
}

message HuntArguments {
  option (semantic) = {
    union_field: "hunt_type"
  };

  enum HuntType {
    UNSET = 0;
    STANDARD = 1;
    VARIABLE = 2;
  }
  optional HuntType hunt_type = 1;

  optional HuntArgumentsStandard standard = 2;
  optional HuntArgumentsVariable variable = 3;
}

// Next id: 37
message Hunt {
  optional string hunt_id = 1;
  optional string description = 2;
  optional uint64 create_time = 3 [(sem_type) = {
    type: "RDFDatetime",
  }];

  optional string creator = 4;
  optional HuntArguments args = 5;
  optional ForemanClientRuleSet client_rule_set = 6
      [(sem_type) = { description: "Rules that trigger this hunt." }];
  reserved 7;
  optional uint64 duration = 34 [(sem_type) = {
    type: "DurationSeconds",
    description: "A maximum allowed duration after which the hunt is expired.",
  }];
  optional float client_rate = 8 [(sem_type) = {
    description: "The maximum number of clients to engage per minute. "
                 "A rate of 0 means to schedule clients as fast as possible."
  }];

  repeated OutputPluginDescriptor output_plugins = 9 [(sem_type) = {
    description: "Output plugins used for this hunt. These plugins will be "
                 "applied to hunt results."
  }];
  optional uint64 client_limit = 10 [(sem_type) = {
    description: "Maximum number of clients participating in the hunt. "
                 "Best practice is for all hunts to use a limit to start with and "
                 "remove it only when client impact has been assessed by looking at "
                 "hunt stats. Note that this limit can be overshot by a small number "
                 "of clients if there are multiple workers running. ",
  }];
  optional uint64 crash_limit = 11 [(sem_type) = {
    description: "Maximum number of clients that are allowed to crash "
                 "before the hunt is automatically stopped.",
  }];
  optional uint64 avg_results_per_client_limit = 12 [(sem_type) = {
    description: "If the average number of results per client becomes "
                 "greater than this limit, the hunt will be automatically stopped. The "
                 "average is calculated only after 1000 clients report back to the "
                 "hunt.",
  }];
  optional uint64 avg_cpu_seconds_per_client_limit = 13 [(sem_type) = {
    description: "If the average CPU usage seconds per client becomes "
                 "greater than this limit, the hunt will be automatically stopped. The "
                 "average is calculated only after 1000 clients report back to the "
                 "hunt.",
  }];
  optional uint64 avg_network_bytes_per_client_limit = 14 [(sem_type) = {
    description: "If the average network usage per client becomes "
                 "greater than this limit, the hunt will be automatically stopped. The "
                 "average is calculated only after 1000 clients report back to the "
                 "hunt.",
  }];
  optional uint64 per_client_cpu_limit = 15 [(sem_type) = {
    description: "A cpu limit imposed on each client in the hunt.",
  }];
  optional uint64 per_client_network_bytes_limit = 16 [(sem_type) = {
    description: "A network limit (in bytes) imposed on each client in the "
                 "hunt.",
  }];
  optional uint64 total_network_bytes_limit = 33 [(sem_type) = {
    description: "Total network bytes limit imposed on a hunt. A hunt is "
                 "stopped if it receives more bytes than the limit."
  }];

  optional FlowLikeObjectReference original_object = 17 [(sem_type) = {
    description: "If this hunt is a copy of another hunt or flow, we store "
                 "a reference to the original here.",
  }];

  // Attributes below indicate current hunt's state and are modified by
  // hunt-running code during hunt's lifetime.
  enum HuntState {
    UNSET = 0;
    PAUSED = 1;
    STARTED = 2;
    STOPPED = 3;
    COMPLETED = 4;
  }
  optional HuntState hunt_state = 18;
  enum HuntStateReason {
    UNKNOWN = 0;
    DEADLINE_REACHED = 1;
    TOTAL_CLIENTS_EXCEEDED = 2;
    TOTAL_CRASHES_EXCEEDED = 3;
    TOTAL_NETWORK_EXCEEDED = 4;
    AVG_RESULTS_EXCEEDED = 5;
    AVG_NETWORK_EXCEEDED = 6;
    AVG_CPU_EXCEEDED = 7;
    TRIGGERED_BY_USER = 8;
  }
  optional HuntStateReason hunt_state_reason = 36;
  optional string hunt_state_comment = 19;

  optional uint64 last_update_time = 20 [(sem_type) = {
    type: "RDFDatetime",
  }];
  optional uint64 init_start_time = 35 [(sem_type) = {
    type: "RDFDatetime",
  }];
  optional uint64 last_start_time = 21 [(sem_type) = {
    type: "RDFDatetime",
  }];
  optional uint64 num_clients_at_start_time = 22 [(sem_type) = {
    description: "Number of hunt's clients as it was at start_time. Used "
                 "for client rate calculation."
  }];
  reserved 23;
  reserved 24;
  reserved 25;
  reserved 26;
  reserved 27;
  reserved 28;
  reserved 29;
  reserved 30;
  reserved 31;
  reserved 32;
}

message HuntMetadata {
  optional string hunt_id = 1;
  optional string description = 2;
  optional uint64 create_time = 3 [(sem_type) = {
    type: "RDFDatetime",
  }];

  optional string creator = 4;
  optional uint64 duration = 5 [(sem_type) = {
    type: "DurationSeconds",
    description: "A maximum allowed duration after which the hunt is expired.",
  }];
  optional float client_rate = 6 [(sem_type) = {
    description: "The maximum number of clients to engage per minute. "
                 "A rate of 0 means to schedule clients as fast as possible."
  }];

  optional uint64 client_limit = 7 [(sem_type) = {
    description: "Maximum number of clients participating in the hunt. "
                 "Best practice is for all hunts to use a limit to start with "
                 "and remove it only when client impact has been assessed by "
                 "looking at hunt stats. Note that this limit can be overshot "
                 "by a small number of clients if there are multiple workers "
                 "running.",
  }];
  optional Hunt.HuntState hunt_state = 9;
  optional string hunt_state_comment = 10;

  optional uint64 last_update_time = 11 [(sem_type) = {
    type: "RDFDatetime",
  }];
  optional uint64 init_start_time = 12 [(sem_type) = {
    type: "RDFDatetime",
  }];
  optional uint64 last_start_time = 13 [(sem_type) = {
    type: "RDFDatetime",
  }];
}
