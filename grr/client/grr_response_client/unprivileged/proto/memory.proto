syntax = "proto2";

package grr.client.unprivileged.memory;

message StringMatch {
  // ID of string that matched.
  optional string string_id = 1;

  // Offset in memory of the matched string
  optional uint64 offset = 2;

  // Matching data in memory.
  optional bytes data = 3;

  // Original offset of the chunk that has been matched.
  optional uint64 chunk_offset = 4;

  // Context bytes around the match.
  optional bytes context = 5;
}

message RuleMatch {
  // Rule name that matched.
  optional string rule_name = 1;

  // Individual matches.
  repeated StringMatch string_matches = 2;
}

message ScanResult {
  repeated RuleMatch scan_match = 1;
}

message UploadSignatureRequest {
  // YARA signature string.
  optional string yara_signature = 1;
}

message UploadSignatureResponse {}

message Chunk {
  // Offset in memory to start scan.
  optional uint64 offset = 1;

  // Size of memory to scan.
  optional uint64 size = 2;
}

message ProcessScanRequest {
  // Serialized file descriptor to process memory.
  // The file descriptor must be accessible to the server process.
  optional uint64 serialized_file_descriptor = 1;

  // List of memory chunks to scan.
  repeated Chunk chunks = 5;

  // Timeout in seconds for the scan.
  optional uint64 timeout_seconds = 4;

  // Context window
  optional uint64 context_window = 6;

  reserved 2, 3;
}

message ProcessScanResponse {
  enum Status {
    NO_ERROR = 0;
    GENERIC_ERROR = 1;
    TIMEOUT_ERROR = 2;
    TOO_MANY_MATCHES = 3;
  }

  optional Status status = 2;
  optional ScanResult scan_result = 1;
}

message Exception {
  optional string message = 1;
  optional string formatted_exception = 2;
}

message Request {
  oneof payload {
    UploadSignatureRequest upload_signature_request = 1;

    ProcessScanRequest process_scan_request = 2;
  }
}

message Response {
  oneof payload {
    Exception exception = 1;

    UploadSignatureResponse upload_signature_response = 2;

    ProcessScanResponse process_scan_response = 3;
  }
}
