// Copyright 2011 Google Inc. All Rights Reserved

// Protobufs for information about a system

// LINT: LEGACY_NAMES

syntax = "proto2";

import "grr/proto/jobs.proto";
import "grr/proto/semantic.proto";


// A Process record describing a system process.
message Process {
  option (semantic) = {
    description: "Process information."
  };

  optional uint32 pid = 1;
  optional uint32 ppid = 2;
  optional string name = 3;
  optional string exe = 4;
  repeated string cmdline = 5;
  optional uint64 ctime = 6;
  optional uint32 real_uid = 7;
  optional uint32 effective_uid = 8;
  optional uint32 saved_uid = 9;
  optional uint32 real_gid = 10;
  optional uint32 effective_gid = 11;
  optional uint32 saved_gid = 12;
  optional string username = 13;
  optional string terminal = 14;
  optional string status = 15;
  optional int32 nice = 16;
  optional string cwd = 17;
  optional uint32 num_threads = 18;
  optional float user_cpu_time = 19;
  optional float system_cpu_time = 20;
  optional float cpu_percent = 21;
  optional uint64 RSS_size = 22;
  optional uint64 VMS_size = 23;
  optional float memory_percent = 24;
  repeated string open_files = 25;
  repeated NetworkConnection connections = 26;
}

message NetworkEndpoint {
  optional string ip = 1;
  optional int32 port = 2;
}

message NetworkConnection {
  enum Family {
    INET = 2;
    INET6 = 10;
    INET6_WIN = 23;
    INET6_OSX = 30;
  };
  enum Type {
    UNKNOWN_SOCKET = 0;
    SOCK_STREAM = 1;
    SOCK_DGRAM = 2;
  };

  optional Family family = 1;
  optional Type type = 2 [default = UNKNOWN_SOCKET];
  optional NetworkEndpoint local_address = 3;
  optional NetworkEndpoint remote_address = 4;

  // This enum contains connection states as returned by psutils.
  enum State {
    UNKNOWN = 0;
    CLOSED = 1;
    LISTEN = 2;
    SYN_SENT = 3;
    SYN_RECV = 4;
    ESTABLISHED = 5;
    FIN_WAIT1 = 6;
    FIN_WAIT2 = 7;
    CLOSE_WAIT = 8;
    CLOSING = 9;
    LAST_ACK = 10;
    TIME_WAIT = 11;
    DELETE_TCB = 12;
    // psutils later than v1.0 return "NONE" instead of "UNKNOWN" so we
    // support both.
    NONE = 13;
  };
  optional State state = 5 [default = UNKNOWN];
  optional uint32 pid = 6;
  optional uint64 ctime = 7;
}

// Describe filesystems
message Filesystem {
  optional string device = 1;
  optional string mount_point = 2;
  optional string type = 3;
  optional string label = 4;
  optional AttributedDict options = 5;
};

message MRUFile {
  optional string filename = 1;
  optional uint64 timestamp = 2 [default = 0];
}

message RunKey {
  optional string keyname = 1;
  optional string filepath = 2;
  optional uint64 lastwritten = 3 [default = 0];
}

message WindowsServiceInformation {
  option (semantic) = {
    description: "Describe a windows service or driver. Field names follow"
    " the cybox naming scheme where possible: "
    "http://cybox.mitre.org/language/version2.0.1/xsddocs/objects/Win_Service_Object.html",
  };

  optional string name = 1 [(sem_type) = {
      description: "The name of the service.",
    }];

  optional string description = 2 [(sem_type) = {
      description: "The description string of the service.",
    }];

  optional StatEntry binary = 3 [(sem_type) = {
      description: "The binary on the client. This may also contain an AFF4 "
      "urn to the server copy of the same file.",
    }];

  optional string state = 4 [(sem_type) = {
      description: "Current state of the service.",
    }];

  optional Dict wmi_information = 5 [(sem_type) = {
      description: "Additional information available through WMI.",
    }];

  optional string display_name = 6 [(sem_type) = {
      description: "Displayed name of the service in Windows GUI controls.",
    }];

  optional string driver_package_id = 7 [(sem_type) = {
      description: "Driver Package ID of the service.",
    }];

  enum ErrorControl {
    CRITICAL = 3;
    SEVERE = 2;
    NORMAL = 1;
    IGNORE = 0;
  };

  optional ErrorControl error_control = 8 [(sem_type) = {
      description: "Behaviour of the service on failure to load/initialize",
    }];

  optional string image_path = 9 [(sem_type) = {
      description: "ImagePath of the service.",
    }];

  optional string object_name = 10 [(sem_type) = {
      description: "ObjectName of the service.",
    }];

  enum ServiceMode {
    SERVICE_BOOT_START = 0;
    SERVICE_SYSTEM_START = 1;
    SERVICE_AUTO_START = 2;
    SERVICE_DEMAND_START = 3;
    SERVICE_DISABLED = 4;
  };

  optional ServiceMode startup_type = 11 [(sem_type) = {
      description: "Service start options",
    }];

  enum ServiceType {
    SERVICE_KERNEL_DRIVER = 0x1;
    SERVICE_FILE_SYSTEM_DRIVER = 0x2;
    SERVICE_ADAPTER_ARGS = 0x4;
    SERVICE_WIN32_OWN_PROCESS = 0x10;
    SERVICE_WIN32_SHARE_PROCESS = 0x20;
  };

  optional ServiceType service_type = 12 [(sem_type) = {
      description: "Type of the service.",
    }];

  optional string group_name = 13 [(sem_type) = {
      description: "Specifies the name of the load ordering group of which "
      "this service is a member.",
    }];

  optional string service_dll = 14 [(sem_type) = {
      description: "Name of the DLL instantiated in the service.",
    }];

  optional string registry_key = 15 [(sem_type) = {
      type: "RDFURN",
      description: "The AFF4 location for the service registry key."
    }];

}

message OSXServiceInformation {
  option (semantic) = {
    description: "Describe an OS X service (launchagent/daemon).",
  };

  optional string label = 1 [(sem_type) = {
      description: "Service label.",
    }];
  optional string program = 2 [(sem_type) = {
      description: "Program path run by the service.",
    }];
  repeated string args = 3 [(sem_type) = {
      description: "Program args.  May also include executable if Program is"
                   " not set.",
    }];
  optional uint64 pid = 4 [(sem_type) = {
      description: "Current service PID"
    }];

  optional string sessiontype = 5 [(sem_type) = {
      description: "SessionType: Aqua|StandardIO|Background|LoginWindow"
    }];

  optional uint64 lastexitstatus = 6 [(sem_type) = {
      description: "Last exit return code of service."
    }];

  optional uint64 timeout = 7 [(sem_type) = {
      description: "Service timeout."
    }];

  optional bool ondemand = 8 [(sem_type) = {
      description: "True if the service should start ondemand."
    }];

  repeated string machservice = 9 [(sem_type) = {
      description: "Machservices advertised by this service."
    }];

  repeated string perjobmachservice = 10 [(sem_type) = {
      description: "Machservices advertised by this service."
    }];

  repeated string socket = 11 [(sem_type) = {
      description: "Sockets used by this service."
    }];

  optional string plist = 15 [(sem_type) = {
      type: "RDFURN",
      description: "The AFF4 location for the service plist."
    }];
}

message LinuxServiceInformation {
  option (semantic) = {
    description: "Describe an Linux service (init/upstart/systemd).",
  };

  optional string name = 1 [(sem_type) = {
      description: "The name of the service.",
    }];

  optional string description = 2 [(sem_type) = {
      description: "The description string of the service.",
    }];

  optional StatEntry binary = 3 [(sem_type) = {
      description: "The binary on the client. This may also contain an AFF4 "
      "urn to the server copy of the same file.",
    }];

  optional SoftwarePackage software = 4 [(sem_type) = {
      description: "Software package that deployed the service.",
    }];

  enum StartMode {
    UNKNOWN = 0;
    INIT = 1;
    UPSTART = 2;
    SYSTEMD = 3;
    INETD = 4;
    XINETD = 5;
  }

  optional StartMode start_mode = 5 [(sem_type) = {
      description: "Service start options",
    }];

  repeated uint32 start_on = 6 [(sem_type) = {
      description: "Specifies the runlevels where this service runs.",
    }];

  repeated uint32 stop_on = 7 [(sem_type) = {
      description: "Specifies the runlevels where this service is stopped.",
    }];

  repeated string start_after = 8 [(sem_type) = {
      description: "Specifies services required before this service runs.",
    }];

  repeated string stop_after = 9 [(sem_type) = {
      description: "Specifies service required before this service is stopped.",
    }];

  optional AttributedDict config = 10 [(sem_type) = {
      description: "The configuration of the service.",
    }];

  optional bool starts = 11 [(sem_type) = {
      description: "The service is configured to start up through some means.",
    }];
}

// Describe an installed software package. Cross platform.
message SoftwarePackage {
  optional string name = 1;
  optional string version = 2;
  optional string architecture = 3;
  optional string publisher = 4;
  enum InstallState {
    INSTALLED = 0;
    PENDING = 1;
    UNINSTALLED = 2;
    UNKNOWN = 3;
  };
  optional InstallState install_state = 5 [default = UNKNOWN];
  optional string description = 6;
  optional uint64 installed_on = 7;
  optional string installed_by = 8;

}


// An item from the browser history.
message BrowserHistoryItem {

  optional string url = 1 [(sem_type) = {
      description: "The URL visited.",
    }];

  optional string domain = 2 [(sem_type) = {
      description: "Domain name accessed.",
    }];

  optional uint64 access_time = 3 [(sem_type) = {
      type: "RDFDatetime",
      description: "Time the URL was accessed.",
    }];

  optional string referrer = 4 [(sem_type) = {
      description: "Referrer used for the access",
    }];

  optional string title = 5 [(sem_type) = {
      description: "Title attribute of the page if available.",
    }];

  optional string program_name = 6 [(sem_type) = {
      description: "Name of the program that generated the entry, e.g. Chrome.",
    }];

  optional string source_urn = 7 [(sem_type) = {
      type: "RDFURN",
      description: "Location of object that this entry was found in.",
    }];

  optional string download_path = 8 [(sem_type) = {
      description: "Path of downloaded file.",
    }];
}

// Based on cybox definition:
// http://cybox.mitre.org/language/version2.1/xsddocs/objects/Volume_Object.html
message Volume {

  optional bool is_mounted = 1 [(sem_type) = {
      description: "True if the volume is mounted",
    }];

  optional string name = 2 [(sem_type) = {
      description: "The name of the volume",
    }];

  optional string device_path = 3 [(sem_type) = {
      description: "Full path to the volume, including the device on which "
      "it resides",
    }];

  optional string file_system_type = 4 [(sem_type) = {
      description: "Name of the filesystem used on the volume",
    }];

  optional uint64 total_allocation_units = 5 [(sem_type) = {
      description: "Total number of allocation units available on the volume",
    }];

  optional uint64 sectors_per_allocation_unit = 6 [(sem_type) = {
      description: "Number of disk sectors for each allocation unit",
    }];

  optional uint64 bytes_per_sector = 7 [(sem_type) = {
      description: "Number of disk sectors for each allocation unit",
    }];

  optional uint64 actual_available_allocation_units = 8 [(sem_type) = {
      description: "Number of allocation units available on the volume",
    }];

  optional uint64 creation_time = 9 [(sem_type) = {
      type: "RDFDatetime",
      description: "Creation timestamp for the volume",
    }];

  enum VolumeFileSystemFlagEnum {
    FILE_CASE_SENSITIVE_SEARCH = 1;
    FILE_CASE_PRESERVED_NAMES = 2;
    FILE_UNICODE_ON_DISK = 3;
    FILE_PERSISTENT_ACLS = 4;
    FILE_FILE_COMPRESSION = 5;
    FILE_VOLUME_QUOTAS = 6;
    FILE_SUPPORTS_SPARSE_FILES = 7;
    FILE_SUPPORTS_REPARSE_POINTS = 8;
    FILE_SUPPORTS_REMOTE_STORAGE = 9;
    FILE_VOLUME_IS_COMPRESSED = 10;
    FILE_SUPPORTS_OBJECT_IDS = 11;
    FILE_SUPPORTS_ENCRYPTION = 12;
    FILE_NAMED_STREAMS = 13;
    FILE_READ_ONLY_VOLUME = 14;
    FILE_SEQUENTIAL_WRITE_ONCE = 15;
    FILE_SUPPORTS_TRANSACTIONS = 16;
    FILE_SUPPORTS_HARD_LINKS = 17;
    FILE_SUPPORTS_EXTENDED_ATTRIBUTES = 18;
    FILE_SUPPORTS_OPEN_BY_FILE_ID = 19;
    FILE_SUPPORTS_USN_JOURNAL = 20;
    FILE_SUPPORTS_INTEGRITY_STREAMS = 21;
  };

  repeated VolumeFileSystemFlagEnum file_system_flag_list = 10 [(sem_type) = {
      description: "Flags set for the volume",
    }];

  optional string serial_number = 11 [(sem_type) = {
      description: "Serial number of the volume",
    }];

  optional WindowsVolume windows = 12 [(sem_type) = {
      description: "Windows specific volume attributes",
    }];

  optional UnixVolume unix = 13 [(sem_type) = {
      description: "Unix specific volume attributes",
    }];

}

// Based on cybox definition:
// http://cybox.mitre.org/language/version2.1/xsddocs/objects/Win_Volume_Object.html
message WindowsVolume {

  // WindowsVolume
  enum WindowsVolumeAttributeEnum {
    READONLY = 0;
    HIDDEN = 1;
    NODEFAULTDRIVELETTER = 2;
    SHADOWCOPY = 3;
  };

  repeated WindowsVolumeAttributeEnum attributes_list = 1 [(sem_type) = {
      description: "Attributes of the volume",
    }];

  optional string drive_letter = 2 [(sem_type) = {
      description: "Windows drive letter",
    }];

  enum WindowsDriveTypeEnum {
    DRIVE_UNKNOWN = 0;
    DRIVE_NO_ROOT_DIR = 1;
    DRIVE_REMOVABLE = 2;
    DRIVE_FIXED = 3;
    DRIVE_REMOTE = 4;
    DRIVE_CDROM = 5;
    DRIVE_RAMDISK = 6;
  };

  optional WindowsDriveTypeEnum drive_type = 3 [(sem_type) = {
      description: "Windows drive letter",
    }];

}

// Based on cybox definition:
// http://cybox.mitre.org/language/version2.1/xsddocs/objects/Unix_Volume_Object.html
message UnixVolume {

  optional string mount_point = 1 [(sem_type) = {
      description: "Mount point",
    }];

  optional string options = 2 [(sem_type) = {
      description: "Options used when mounting the volume",
    }];

}

// Submitted request for addition to CyBox schema:
// https://github.com/CybOXProject/schemas/issues/329
message DNSClientConfiguration {
  option (semantic) = {
    description: "DNS client configuration information."
  };

  repeated string dns_server = 1 [(sem_type) = {
      description: "List of DNS servers appended in search order.",
    }];

  repeated string dns_suffix = 2 [(sem_type) = {
      description: "List of DNS suffixes appended in search order.",
    }];

}

// Various System Hardware
message HardwareInfo {

  optional string serial_number = 1 [(sem_type) = {
      description: "Identifying/Serial Number."
    }];

  optional string system_manufacturer = 2 [(sem_type) = {
      description: "System Manufacturer."
    }];

}

// OSX Plist dictionary of strings entry

message PlistStringDictEntry {
  optional string name = 1;
  optional string value = 2;
}

// OSX plist dictionary of booleans entry

message PlistBoolDictEntry {
  optional string name = 1;
  optional bool value = 2;
}

// OSX Launchd plist StartCalendarInteveral entry

message LaunchdStartCalendarIntervalEntry {
  optional int32 Minute = 1;
  optional int32 Hour = 2;
  optional int32 Day = 3;
  optional int32 Weekday = 4;
  optional int32 Month = 5;
}

// OSX Launchd plist Keep Alive

message LaunchdKeepAlive {
  optional bool SuccessfulExit = 1;
  optional bool NetworkState = 2;
  repeated PlistBoolDictEntry PathState = 3;
  repeated PlistBoolDictEntry OtherJobEnabled = 4;
}

// OSX Launchd plist
message LaunchdPlist {
  optional string aff4path = 1[(sem_type) = {
    type: "RDFURN",
    description: "The location of this file in the AFF4 space."
  }];
  optional string Label = 2;
  optional bool Disabled = 3;
  optional string UserName = 4;
  optional string GroupName = 5;
  optional string Program = 6;
  repeated string ProgramArguments = 7;
  optional string RootDirectory = 8;
  optional string WorkingDirectory = 9;
  optional bool OnDemand = 10;
  optional bool RunAtLoad = 11;
  repeated LaunchdStartCalendarIntervalEntry StartCalendarInterval = 12;
  repeated PlistStringDictEntry EnvironmentVariables = 13;
  optional bool KeepAlive = 14;
  optional LaunchdKeepAlive KeepAliveDict = 15;
  optional string StandardInPath = 16;
  optional string StandardOutPath = 17;
  optional string StandardErrorPath = 18;
  repeated string LimitLoadToHosts = 19;
  repeated string LimitLoadFromHosts = 20;
  repeated string LimitLoadToSessionType = 21;
  optional bool EnableGlobbing = 22;
  optional bool EnableTransactions = 23;
  optional int32 Umask = 24;
  optional int32 TimeOut = 25;
  optional int32 ExitTimeOut = 26;
  optional int32 ThrottleInterval = 27;
  optional bool InitGroups = 28;
  repeated string WatchPaths = 29;
  repeated string QueueDirectories = 30;
  optional bool StartOnMount = 31;
  optional int32 StartInterval = 32;
  optional bool Debug = 33;
  optional bool WaitForDebugger = 34;
  optional int32 Nice = 35;
  optional string ProcessType = 36;
  optional bool AbandonProcessGroup = 37;
  optional bool LowPriorityIO = 38;
  optional bool LaunchOnlyOnce = 39;
  optional bool inetdCompatabilityWait = 40;
  optional bool SoftResourceLimits = 41;
  optional bool HardResourceLimits = 42;
  optional bool Sockets = 43;
}

// CronTab Entry
message CronTabEntry{
  optional string minute = 1;
  optional string hour = 2;
  optional string dayofmonth = 3;
  optional string month = 4;
  optional string dayofweek = 5;
  optional string command = 6;
  optional string comment = 7;
}

// CronTab File
message CronTabFile {
  optional string aff4path = 1[(sem_type) = {
    type: "RDFURN",
    description: "The location of this file in the AFF4 space."
  }];
  repeated CronTabEntry jobs = 2;
}

// based on http://tools.ietf.org/html/rfc3986#page-16 but much simplified
// URI should generally be stored as strings for efficiency. Only use this
// proto if there is a specific need to parse the individual components.
message URI {
  optional string transport = 1 [(sem_type) = {
    description: "Transport such http, ftp, mailto, file etc.",
  }];
  optional string host = 2 [(sem_type) = {
    description: "Host/Port portion of the URI. e.g. google.com:80.",
  }];
  optional string path = 3 [(sem_type) = {
    description: "Path portion of the URI.",
  }];
  optional string query = 4 [(sem_type) = {
    description: "Query portion of the URI.",
  }];
  optional string fragment = 5 [(sem_type) = {
    description: "Fragment portion of the URI.",
  }];
}
